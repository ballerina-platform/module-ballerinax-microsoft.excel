// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# This OData service is located at https://graph.microsoft.com/v1.0
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://graph.microsoft.com/v1.0") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }
    # Gets the smallest range that encompasses the given ranges.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + anotherRange - Usage: anotherRange={anotherRange}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeBoundingRect(string workbookId, string workbookNamedItemId, string anotherRange, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/boundingRect(anotherRange=${getEncodedUri(anotherRange)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the smallest range that encompasses the given ranges.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + anotherRange - Usage: anotherRange={anotherRange}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeBoundingRect(string workbookId, string workbookWorksheetId, string address, string anotherRange, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/boundingRect(anotherRange=${getEncodedUri(anotherRange)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the smallest range that encompasses the given ranges.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + anotherRange - Usage: anotherRange={anotherRange}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeBoundingRect(string workbookId, string workbookTableId, string workbookTableColumnId, string anotherRange, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/boundingRect(anotherRange=${getEncodedUri(anotherRange)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the range containing the single cell based on row and column numbers.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + row - Usage: row={row}
    # + column - Usage: column={column}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeCell(string workbookId, string workbookNamedItemId, int row, int column, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/cell(row=${getEncodedUri(row)},column=${getEncodedUri(column)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the range object containing the single cell based on row and column numbers.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + row - Usage: row={row}
    # + column - Usage: column={column}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeCell(string workbookId, string workbookWorksheetId, string address, int row, int column, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/cell(row=${getEncodedUri(row)},column=${getEncodedUri(column)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the range object containing the single cell based on row and column numbers.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + row - Usage: row={row}
    # + column - Usage: column={column}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeCell(string workbookId, string workbookTableId, string workbookTableColumnId, int row, int column, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/cell(row=${getEncodedUri(row)},column=${getEncodedUri(column)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Clear range values such as format, fill, and border.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function clearWorkbookNamedItemRange(string workbookId, string workbookNamedItemId, ApplyTo payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/clear`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Clear range values such as format, fill, and border.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function clearWorksheetRange(string workbookId, string workbookWorksheetId, string address, ApplyTo payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/clear`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Clear range values such as format, fill, and border.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function clearWorkbookTableColumnRange(string workbookId, string workbookTableId, string workbookTableColumnId, ApplyTo payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/clear`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets a column contained in the range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + column - Usage: column={column}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeColumn(string workbookId, string workbookNamedItemId, int column, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/column(column=${getEncodedUri(column)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a column contained in the range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + column - Usage: column={column}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkseetRangeColumn(string workbookId, string workbookWorksheetId, string address, int column, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/column(column=${getEncodedUri(column)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a column contained in the range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + column - Usage: column={column}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeColumn(string workbookId, string workbookTableId, string workbookTableColumnId, int column, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/column(column=${getEncodedUri(column)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a certain number of columns to the right of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetColumnsAfterRange(string workbookId, string workbookWorksheetId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range/columnsAfter`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a certain number of columns to the right of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + count - Usage: count={count}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetColumnsAfterRangeWithCount(string workbookId, string workbookWorksheetId, int count, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range/columnsAfter(count=${getEncodedUri(count)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a certain number of columns to the left of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetColumnsBeforeRange(string workbookId, string workbookWorksheetId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range/columnsBefore`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a certain number of columns to the left of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + count - Usage: count={count}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetColumnsBeforeRangeWithCount(string workbookId, string workbookWorksheetId, int count, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range/columnsBefore(count=${getEncodedUri(count)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Deletes the cells associated with the range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function deleteWorkbookNamedItemRange(string workbookId, string workbookNamedItemId, Shift payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/delete`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes the cells associated with the range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function deleteWorksheetRange(string workbookId, string workbookWorksheetId, Shift payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/range/delete`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Deletes the cells associated with the range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function deleteWorkbookTableColumnRange(string workbookId, string workbookTableId, string workbookTableColumnId, Shift payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/delete`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets an range that represents the entire column of the range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeEntireColumn(string workbookId, string workbookNamedItemId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/entireColumn`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets an range that represents the entire column of the range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeEntireColumn(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/range/entireColumn`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets an range that represents the entire column of the range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeEntireColumn(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/entireColumn`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a range that represents the entire row of the range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNameRangeEntireRow(string workbookId, string workbookNamedItemId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/entireRow`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a range that represents the entire row of the range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeEntireRow(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/range/entireRow`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a range that represents the entire row of the range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeEntireRow(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/entireRow`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function insertWorkbookNamedItemRange(string workbookId, string workbookNamedItemId, Shift payload, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/insert`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Range response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function insertWorksheetRange(string workbookId, string workbookWorksheetId, string address, Shift payload, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/range/insert`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Range response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function insertWorkbookTableColumnRange(string workbookId, string workbookTableId, string workbookTableColumnId, Shift payload, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/insert`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Range response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets the range that represents the rectangular intersection of the given ranges.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + anotherRange - Usage: anotherRange={anotherRange}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeIntersection(string workbookId, string workbookNamedItemId, string anotherRange, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/intersection(anotherRange=${getEncodedUri(anotherRange)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the range that represents the rectangular intersection of the given ranges.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + anotherRange - Usage: anotherRange={anotherRange}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeIntersection(string workbookId, string workbookWorksheetId, string address, string anotherRange, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/intersection(anotherRange=${getEncodedUri(anotherRange)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the range that represents the rectangular intersection of the given ranges.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + anotherRange - Usage: anotherRange={anotherRange}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeIntersection(string workbookId, string workbookTableId, string workbookTableColumnId, string anotherRange, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/intersection(anotherRange=${getEncodedUri(anotherRange)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last cell within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeLastCell(string workbookId, string workbookNamedItemId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/lastCell`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last cell within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeLastCell(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/lastCell`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last cell within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeLastCell(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/lastCell`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last column within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeLastColumn(string workbookId, string workbookNamedItemId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/lastColumn`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last column within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeLastColumn(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/lastColumn`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last column within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeLastColumn(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/lastColumn`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last row within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeLastRow(string workbookId, string workbookNamedItemId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/lastRow`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last row within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeLastRow(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/range/lastRow`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the last row within the range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeLastRow(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/lastRow`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Merge the range cells into one region in the worksheet.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function mergeWorkbookNamedItemRange(string workbookId, string workbookNamedItemId, Across payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/merge`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Merge the range cells into one region in the worksheet.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function mergeWorksheetRange(string workbookId, string workbookWorksheetId, string address, Across payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/merge`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Merge the range cells into one region in the worksheet.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function mergeWorkbookTableColumnRange(string workbookId, string workbookTableId, string workbookTableColumnId, Across payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/merge`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets range that's offset from the specified range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + rowOffset - Usage: rowOffset={rowOffset}
    # + columnOffset - Usage: columnOffset={columnOffset}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemOffsetRange(string workbookId, string workbookNamedItemId, int rowOffset, int columnOffset, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/offsetRange(rowOffset=${getEncodedUri(rowOffset)},columnOffset=${getEncodedUri(columnOffset)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets range that's offset from the specified range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + rowOffset - Usage: rowOffset={rowOffset}
    # + columnOffset - Usage: columnOffset={columnOffset}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetOffsetRange(string workbookId, string workbookWorksheetId, string address, int rowOffset, int columnOffset, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/offsetRange(rowOffset=${getEncodedUri(rowOffset)},columnOffset=${getEncodedUri(columnOffset)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets range that's offset from the specified range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + rowOffset - Usage: rowOffset={rowOffset}
    # + columnOffset - Usage: columnOffset={columnOffset}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnOffsetRange(string workbookId, string workbookTableId, string workbookTableColumnId, int rowOffset, int columnOffset, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/offsetRange(rowOffset=${getEncodedUri(rowOffset)},columnOffset=${getEncodedUri(columnOffset)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get a range similar to the current range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + deltaRows - Usage: deltaRows={deltaRows}
    # + deltaColumns - Usage: deltaColumns={deltaColumns}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemResizedRange(string workbookId, string workbookNamedItemId, int deltaRows, int deltaColumns, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/resizedRange(deltaRows=${getEncodedUri(deltaRows)},deltaColumns=${getEncodedUri(deltaColumns)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get a range similar to the current range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + deltaRows - Usage: deltaRows={deltaRows}
    # + deltaColumns - Usage: deltaColumns={deltaColumns}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetResizedRange(string workbookId, string workbookWorksheetId, string address, int deltaRows, int deltaColumns, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/resizedRange(deltaRows=${getEncodedUri(deltaRows)},deltaColumns=${getEncodedUri(deltaColumns)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get a range similar to the current range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + deltaRows - Usage: deltaRows={deltaRows}
    # + deltaColumns - Usage: deltaColumns={deltaColumns}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnResizedRange(string workbookId, string workbookTableId, string workbookTableColumnId, int deltaRows, int deltaColumns, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/resizedRange(deltaRows=${getEncodedUri(deltaRows)},deltaColumns=${getEncodedUri(deltaColumns)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a row contained in the range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + row - Usage: row={row}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeRow(string workbookId, string workbookNamedItemId, int row, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/row(row=${getEncodedUri(row)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a row contained in the range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + row - Usage: row={row}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeRow(string workbookId, string workbookWorksheetId, string address, int row, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/row(row=${getEncodedUri(row)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a row contained in the range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + row - Usage: row={row}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeRow(string workbookId, string workbookTableId, string workbookTableColumnId, int row, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/row(row=${getEncodedUri(row)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets a certain number of rows above a given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeRowAbove(string workbookId, string workbookWorksheetId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range/rowsAbove`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets certain number of rows below a given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeRowBelow(string workbookId, string workbookWorksheetId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range/rowsBelow`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets certain number of rows below a given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + count - Usage: count={count}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeRowBelowWithCount(string workbookId, string workbookWorksheetId, int count, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range/rowsBelow(count=${getEncodedUri(count)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Unmerge the range cells into separate cells.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function unmergeWorkbookNamedItemRange(string workbookId, string workbookNamedItemId, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/unmerge`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Unmerge the range cells into separate cells.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function unmergeWorksheetRange(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/unmerge`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Unmerge the range cells into separate cells.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function unmergeWorkbookTableColumnRange(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/unmerge`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets the used range of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemUsedRnge(string workbookId, string workbookNamedItemId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/usedRange`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the used range of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + valuesOnly - Usage: valuesOnly={valuesOnly}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemUsedRngeWithValuesOnly(string workbookId, string workbookNamedItemId, boolean valuesOnly, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/usedRange(valuesOnly=${getEncodedUri(valuesOnly)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the used range of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetUsedRange(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/usedRange`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the used range of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + valuesOnly - Usage: valuesOnly={valuesOnly}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetUsedRangeWithValuesOnly(string workbookId, string workbookWorksheetId, string address, boolean valuesOnly, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/usedRange(valuesOnly=${getEncodedUri(valuesOnly)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the used range of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnUsedRange(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/usedRange`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the used range of the given range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + valuesOnly - Usage: valuesOnly={valuesOnly}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnUsedRangeWithValuesOnly(string workbookId, string workbookTableId, string workbookTableColumnId, boolean valuesOnly, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/usedRange(valuesOnly=${getEncodedUri(valuesOnly)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get the range visible from a filtered range.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookNamedItemRangeVisibleView(string workbookId, string workbookNamedItemId, string? workbookSessionId = ()) returns RangeView|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/range/visibleView`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        RangeView response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get the range visible from a filtered range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeVisibleView(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns RangeView|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address='<address>')/visibleView`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        RangeView response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get the range visible from a filtered range.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableColumnRangeVisibleView(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns RangeView|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range/visibleView`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        RangeView response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get application from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorkbookApplication(string workbookId, string? workbookSessionId = (), ("id"|"calculationMode")[]? 'select = (), ("*")[]? expand = ()) returns Application|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/application`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Application response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Recalculate all currently opened workbooks in Excel.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function calculateWorkbookApplication(string workbookId, CalculationType payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/application/calculate`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Close an existing workbook session.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function closeSession(string workbookId, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/closeSession`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Create a new workbook session.
    #
    # + workbookId - key: id of workbook
    # + payload - Action parameters
    # + return - Success 
    remote isolated function createSession(string workbookId, PersistChanges payload) returns SessionInfo|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/createSession`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        SessionInfo response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Refreshes an existing workbook session.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function refreshSession(string workbookId, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/refreshSession`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get names from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorkbookNamedItem(string workbookId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"comment"|"comment desc"|"name"|"name desc"|"scope"|"scope desc"|"type"|"type desc"|"value"|"value desc"|"visible"|"visible desc")[]? orderby = (), ("id"|"comment"|"name"|"scope"|"type"|"value"|"visible"|"worksheet")[]? 'select = (), ("*"|"worksheet")[]? expand = ()) returns NamedItems|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        NamedItems response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get names from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorkbookNamedItem(string workbookId, string workbookNamedItemId, string? workbookSessionId = (), ("id"|"comment"|"name"|"scope"|"type"|"value"|"visible"|"worksheet")[]? 'select = (), ("*"|"worksheet")[]? expand = ()) returns NamedItem|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        NamedItem response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete navigation property names for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorkbookNamedItem(string workbookId, string workbookNamedItemId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Update the navigation property names in workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - Retrieved navigation property 
    remote isolated function updateWorkbookNamedItem(string workbookId, string workbookNamedItemId, NamedItem payload, string? workbookSessionId = ()) returns NamedItem|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        NamedItem response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Create new navigation property to series for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property
    # + return - Created navigation property. 
    remote isolated function createWorkbookNamedItemWorksheetChartSeries(string workbookId, string workbookNamedItemId, string workbookChartId, ChartSeries payload, string? workbookSessionId = ()) returns ChartSeries|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/worksheet/charts/${getEncodedUri(workbookChartId)}/series`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ChartSeries response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Create new navigation property to columns for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property
    # + return - Created navigation property. 
    remote isolated function createWorkbookNamedItemWorksheetTableColumn(string workbookId, string workbookNamedItemId, string workbookTableId, Column payload, string? workbookSessionId = ()) returns Column|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/names/${getEncodedUri(workbookNamedItemId)}/worksheet/tables/${getEncodedUri(workbookTableId)}/columns`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Column response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Adds a new name to the collection of the given scope using the user's locale for the formula.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorkbookName(string workbookId, NewNamedItem payload, string? workbookSessionId = ()) returns NamedItem|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/names/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        NamedItem response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates new formula local.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorkbookNameFormulaLocal(string workbookId, Formula payload, string? workbookSessionId = ()) returns NamedItem|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/names/addFormulaLocal`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        NamedItem response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets tables from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorkbookTables(string workbookId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"highlightFirstColumn"|"highlightFirstColumn desc"|"highlightLastColumn"|"highlightLastColumn desc"|"name"|"name desc"|"showBandedColumns"|"showBandedColumns desc"|"showBandedRows"|"showBandedRows desc"|"showFilterButton"|"showFilterButton desc"|"showHeaders"|"showHeaders desc"|"showTotals"|"showTotals desc"|"style"|"style desc")[]? orderby = (), ("id"|"highlightFirstColumn"|"highlightLastColumn"|"name"|"showBandedColumns"|"showBandedRows"|"showFilterButton"|"showHeaders"|"showTotals"|"style"|"columns"|"rows"|"sort"|"worksheet")[]? 'select = (), ("*"|"columns"|"rows"|"sort"|"worksheet")[]? expand = ()) returns Tables|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Tables response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get tables from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorkbookTable(string workbookId, string workbookTableId, string? workbookSessionId = (), ("id"|"highlightFirstColumn"|"highlightLastColumn"|"name"|"showBandedColumns"|"showBandedRows"|"showFilterButton"|"showHeaders"|"showTotals"|"style"|"columns"|"rows"|"sort"|"worksheet")[]? 'select = (), ("*"|"columns"|"rows"|"sort"|"worksheet")[]? expand = ()) returns Table|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Table response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete navigation property tables for workbooks
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorkbookTable(string workbookId, string workbookTableId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Update the navigation property tables in workbooks
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - New navigation property values 
    remote isolated function updateWorkbookTable(string workbookId, string workbookTableId, Table payload, string? workbookSessionId = ()) returns Table|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Table response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Get columns from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorkbookTableColumns(string workbookId, string workbookTableId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"index"|"index desc"|"name"|"name desc"|"values"|"values desc")[]? orderby = (), ("id"|"index"|"name"|"values"|"filter")[]? 'select = (), ("*"|"filter")[]? expand = ()) returns Columns|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Columns response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create new navigation property to columns for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property
    # + return - Created navigation property. 
    remote isolated function createWorkbookTableColumns(string workbookId, string workbookTableId, Column payload, string? workbookSessionId = ()) returns Column|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Column response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get columns from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorkbookTableColumn(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = (), ("id"|"index"|"name"|"values"|"filter")[]? 'select = (), ("*"|"filter")[]? expand = ()) returns Column|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Column response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete columns for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorkbookTableColumn(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Update the columns in workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - Retrieved navigation property 
    remote isolated function updateWorkbookTableColumn(string workbookId, string workbookTableId, string workbookTableColumnId, Column payload, string? workbookSessionId = ()) returns Column|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Column response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Get the range object associated with the entire table.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableRange(string workbookId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get rows from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorkbookTableRows(string workbookId, string workbookTableId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"index"|"index desc"|"values"|"values desc")[]? orderby = (), ("id"|"index"|"values")[]? 'select = (), ("*")[]? expand = ()) returns Rows|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/rows`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Rows response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get rows from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbooktablerowId - key: id of workbookTableRow
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorkbookTableRow(string workbookId, string workbookTableId, string workbooktablerowId, string? workbookSessionId = (), ("id"|"index"|"values")[]? 'select = (), ("*")[]? expand = ()) returns Row|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/rows/${getEncodedUri(workbooktablerowId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Row response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete rows for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbooktablerowId - key: id of workbookTableRow
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorkbookTableRow(string workbookId, string workbookTableId, string workbooktablerowId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/rows/${getEncodedUri(workbooktablerowId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Update the rows in workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbooktablerowId - key: id of workbookTableRow
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - Retrieved navigation property 
    remote isolated function updateWorkbookTableRow(string workbookId, string workbookTableId, string workbooktablerowId, Row payload, string? workbookSessionId = ()) returns Row|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/rows/${getEncodedUri(workbooktablerowId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Row response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Adds rows to the end of the table.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorkbookTableRow(string workbookId, string workbookTableId, NewRow payload, string? workbookSessionId = ()) returns Row|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/rows/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Row response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get charts from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorkbookTableCharts(string workbookId, string workbookTableId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"height"|"height desc"|"left"|"left desc"|"name"|"name desc"|"top"|"top desc"|"width"|"width desc")[]? orderby = (), ("id"|"height"|"left"|"name"|"top"|"width"|"axes"|"dataLabels"|"format"|"legend"|"series"|"title"|"worksheet")[]? 'select = (), ("*"|"axes"|"dataLabels"|"format"|"legend"|"series"|"title"|"worksheet")[]? expand = ()) returns Charts|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/charts`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Charts response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Resets the source data for the chart.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookChartId - key: id of workbookChart
    # + payload - Action parameters
    # + return - Success 
    remote isolated function setWorkbooktableWorksheetChartData(string workbookId, string workbookTableId, string workbookChartId, SetData payload) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/charts/${getEncodedUri(workbookChartId)}/setData`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Positions the chart relative to cells on the worksheet.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function setWorkbookTableWorksheeetChartPosition(string workbookId, string workbookTableId, string workbookChartId, Position payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/charts/${getEncodedUri(workbookChartId)}/setPosition`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get series from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorkbookTableWorksheetChartSeries(string workbookId, string workbookTableId, string workbookChartId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"name"|"name desc")[]? orderby = (), ("id"|"name"|"format"|"points")[]? 'select = (), ("*"|"format"|"points")[]? expand = ()) returns ChartSeriesCollection|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/charts/${getEncodedUri(workbookChartId)}/series`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ChartSeriesCollection response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates a new chart.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorkbookTableWorksheetChart(string workbookId, string workbookTableId, NewChart payload, string? workbookSessionId = ()) returns Chart|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/charts/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Chart response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets the range containing the single cell based on row and column numbers.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + row - Usage: row={row}
    # + column - Usage: column={column}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorkbookTableWorksheetCell(string workbookId, string workbookTableId, int row, int column, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/cell(row=${getEncodedUri(row)},column=${getEncodedUri(column)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Adds a new name to the collection of the given scope using the user's locale for the formula.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorkbookTableWorksheetName(string workbookId, string workbookTableId, NewNamedItem payload, string? workbookSessionId = ()) returns NamedItem|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/names/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        NamedItem response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates new formula local.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorkbookTableWorksheetFormula(string workbookId, string workbookTableId, Formula payload, string? workbookSessionId = ()) returns NamedItem|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/names/addFormulaLocal`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        NamedItem response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates a new table.
    #
    # + workbookId - key: id of workbook
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorkbookTableWorksheetTable(string workbookId, string workbookTableId, NewTable payload, string? workbookSessionId = ()) returns Table|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/${getEncodedUri(workbookTableId)}/worksheet/tables/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Table response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates a new table.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorkbookTable(string workbookId, NewTable payload, string? workbookSessionId = ()) returns Table|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/tables/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Table response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get worksheets from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorksheets(string workbookId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"name"|"name desc"|"position"|"position desc"|"visibility"|"visibility desc")[]? orderby = (), ("id"|"name"|"position"|"visibility"|"charts"|"names"|"pivotTables"|"protection"|"tables")[]? 'select = (), ("*"|"charts"|"names"|"pivotTables"|"protection"|"tables")[]? expand = ()) returns Worksheets|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Worksheets response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Creates new worksheet for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property
    # + return - Created navigation property. 
    remote isolated function createWorksheet(string workbookId, Worksheet payload, string? workbookSessionId = ()) returns Worksheet|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Worksheet response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get worksheets from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorksheet(string workbookId, string workbookWorksheetId, string? workbookSessionId = (), ("id"|"name"|"position"|"visibility"|"charts"|"names"|"pivotTables"|"protection"|"tables")[]? 'select = (), ("*"|"charts"|"names"|"pivotTables"|"protection"|"tables")[]? expand = ()) returns Worksheet|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Worksheet response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete worksheet for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorksheet(string workbookId, string workbookWorksheetId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Update the worksheet in workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - A collection of chart 
    remote isolated function updateWorksheet(string workbookId, string workbookWorksheetId, Worksheet payload, string? workbookSessionId = ()) returns Worksheet|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Worksheet response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Get charts from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorksheetCharts(string workbookId, string workbookWorksheetId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"height"|"height desc"|"left"|"left desc"|"name"|"name desc"|"top"|"top desc"|"width"|"width desc")[]? orderby = (), ("id"|"height"|"left"|"name"|"top"|"width"|"axes"|"dataLabels"|"format"|"legend"|"series"|"title"|"worksheet")[]? 'select = (), ("*"|"axes"|"dataLabels"|"format"|"legend"|"series"|"title"|"worksheet")[]? expand = ()) returns Charts|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Charts response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get chart from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorksheetChart(string workbookId, string workbookWorksheetId, string workbookChartId, string? workbookSessionId = (), ("id"|"height"|"left"|"name"|"top"|"width"|"axes"|"dataLabels"|"format"|"legend"|"series"|"title"|"worksheet")[]? 'select = (), ("*"|"axes"|"dataLabels"|"format"|"legend"|"series"|"title"|"worksheet")[]? expand = ()) returns Chart|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Chart response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete chart for workbooks
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorksheetChart(string workbookId, string workbookWorksheetId, string workbookChartId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Update the chart in workbooks
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - Retrieved navigation property 
    remote isolated function updateWorksheetChart(string workbookId, string workbookWorksheetId, string workbookChartId, Chart payload, string? workbookSessionId = ()) returns Chart|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Chart response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetChartImage(string workbookId, string workbookWorksheetId, string workbookChartId, string? workbookSessionId = ()) returns Image|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}/image`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Image response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + width - Usage: width={width}
    # + height - Usage: height={height}
    # + fittingMode - Usage: fittingMode={fittingMode}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetChartImageWithWidthHeightFittingMode(string workbookId, string workbookWorksheetId, string workbookChartId, int width, int height, string fittingMode, string? workbookSessionId = ()) returns Image|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}/image(width=${getEncodedUri(width)},height=${getEncodedUri(height)},fittingMode=${getEncodedUri(fittingMode)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Image response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + width - Usage: width={width}
    # + height - Usage: height={height}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetChartImageWithWidthHeight(string workbookId, string workbookWorksheetId, string workbookChartId, int width, int height, string? workbookSessionId = ()) returns Image|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}/image(width=${getEncodedUri(width)},height=${getEncodedUri(height)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Image response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + width - Usage: width={width}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetChartImageWithWidth(string workbookId, string workbookWorksheetId, string workbookChartId, int width, string? workbookSessionId = ()) returns Image|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}/image(width=${getEncodedUri(width)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Image response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Resets the source data for the chart.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function setWorksheetChartData(string workbookId, string workbookWorksheetId, string workbookChartId, SetData payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}/setData`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Positions the chart relative to cells on the worksheet.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function setWorksheetChartPosition(string workbookId, string workbookWorksheetId, string workbookChartId, Position payload, string? workbookSessionId = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}/setPosition`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        http:Response response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get series from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorksheetChartSeries(string workbookId, string workbookWorksheetId, string workbookChartId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"name"|"name desc")[]? orderby = (), ("id"|"name"|"format"|"points")[]? 'select = (), ("*"|"format"|"points")[]? expand = ()) returns ChartSeriesCollection|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}/series`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        ChartSeriesCollection response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create new navigation property to series for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookChartId - key: id of workbookChart
    # + payload - New navigation property
    # + return - Created navigation property. 
    remote isolated function createWorksheetChartSeries(string workbookId, string workbookWorksheetId, string workbookChartId, ChartSeries payload) returns ChartSeries|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/${getEncodedUri(workbookChartId)}/series`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        ChartSeries response = check self.clientEp->post(resourcePath, request);
        return response;
    }
    # Creates a new chart.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorksheetChart(string workbookId, string workbookWorksheetId, NewChart payload, string? workbookSessionId = ()) returns Chart|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Chart response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets a chart based on its position in the collection.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + index - Usage: index={index}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetChartItemAt(string workbookId, string workbookWorksheetId, int index, string? workbookSessionId = ()) returns Chart|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/charts/itemAt(index=${getEncodedUri(index)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Chart response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Gets the range containing the single cell based on row and column numbers.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + row - Usage: row={row}
    # + column - Usage: column={column}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetCell(string workbookId, string workbookWorksheetId, int row, int column, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/cell(row=${getEncodedUri(row)},column=${getEncodedUri(column)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Retrieve the properties and relationships of range.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + address - Usage: address={address}
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetRangeWithAddress(string workbookId, string workbookWorksheetId, string address, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/range(address=${getEncodedUri(address)})`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get names from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorksheetNamedItem(string workbookId, string workbookWorksheetId, string workbookNamedItemId, string? workbookSessionId = (), ("id"|"comment"|"name"|"scope"|"type"|"value"|"visible"|"worksheet")[]? 'select = (), ("*"|"worksheet")[]? expand = ()) returns NamedItem|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/names/${getEncodedUri(workbookNamedItemId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        NamedItem response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete navigation property names for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorksheetNamedItem(string workbookId, string workbookWorksheetId, string workbookNamedItemId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/names/${getEncodedUri(workbookNamedItemId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Update the names in workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookNamedItemId - key: id of workbookNamedItem
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - New navigation property values 
    remote isolated function updateWorksheetNamedItem(string workbookId, string workbookWorksheetId, string workbookNamedItemId, NamedItem payload, string? workbookSessionId = ()) returns NamedItem|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/names/${getEncodedUri(workbookNamedItemId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        NamedItem response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Adds a new name to the collection of the given scope using the user's locale for the formula.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorksheetName(string workbookId, string workbookWorksheetId, NewNamedItem payload, string? workbookSessionId = ()) returns NamedItem|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/names/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        NamedItem response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Adds a new name to the collection of a given scope using the user’s locale for the formula.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorksheetFormula(string workbookId, string workbookWorksheetId, Formula payload, string? workbookSessionId = ()) returns NamedItem|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/names/addFormulaLocal`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        NamedItem response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get pivotTables from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorksheetPivotTables(string workbookId, string workbookWorksheetId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"name"|"name desc")[]? orderby = (), ("id"|"name"|"worksheet")[]? 'select = (), ("*"|"worksheet")[]? expand = ()) returns WorkbookPivotTables|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/pivotTables`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        WorkbookPivotTables response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get tables from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorksheetTables(string workbookId, string workbookWorksheetId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"highlightFirstColumn"|"highlightFirstColumn desc"|"highlightLastColumn"|"highlightLastColumn desc"|"name"|"name desc"|"showBandedColumns"|"showBandedColumns desc"|"showBandedRows"|"showBandedRows desc"|"showFilterButton"|"showFilterButton desc"|"showHeaders"|"showHeaders desc"|"showTotals"|"showTotals desc"|"style"|"style desc")[]? orderby = (), ("id"|"highlightFirstColumn"|"highlightLastColumn"|"name"|"showBandedColumns"|"showBandedRows"|"showFilterButton"|"showHeaders"|"showTotals"|"style"|"columns"|"rows"|"sort"|"worksheet")[]? 'select = (), ("*"|"columns"|"rows"|"sort"|"worksheet")[]? expand = ()) returns Tables|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Tables response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get tables from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorksheetTable(string workbookId, string workbookWorksheetId, string workbookTableId, string? workbookSessionId = (), ("id"|"highlightFirstColumn"|"highlightLastColumn"|"name"|"showBandedColumns"|"showBandedRows"|"showFilterButton"|"showHeaders"|"showTotals"|"style"|"columns"|"rows"|"sort"|"worksheet")[]? 'select = (), ("*"|"columns"|"rows"|"sort"|"worksheet")[]? expand = ()) returns Table|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Table response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete table for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorksheetTable(string workbookId, string workbookWorksheetId, string workbookTableId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Updates the table in workbooks
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - New navigation property values 
    remote isolated function updateWorksheetTable(string workbookId, string workbookWorksheetId, string workbookTableId, Table payload, string? workbookSessionId = ()) returns Table|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Table response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets columns from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorksheetTableColumns(string workbookId, string workbookWorksheetId, string workbookTableId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"index"|"index desc"|"name"|"name desc"|"values"|"values desc")[]? orderby = (), ("id"|"index"|"name"|"values"|"filter")[]? 'select = (), ("*"|"filter")[]? expand = ()) returns Columns|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/columns`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Columns response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Create new navigation property to columns for workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property
    # + return - Created navigation property. 
    remote isolated function createWorksheetTableColumn(string workbookId, string workbookWorksheetId, string workbookTableId, Column payload, string? workbookSessionId = ()) returns Column|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/columns`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Column response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Get column from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function getWorksheetTableColumns(string workbookId, string workbookWorksheetId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = (), ("id"|"index"|"name"|"values"|"filter")[]? 'select = (), ("*"|"filter")[]? expand = ()) returns Column|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}`;
        map<anydata> queryParam = {"$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Column response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete column for workbooks
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorksheetTableColumn(string workbookId, string workbookWorksheetId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Update the column in workbooks
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - New navigation property values 
    remote isolated function updateWorksheetTableColumn(string workbookId, string workbookWorksheetId, string workbookTableId, string workbookTableColumnId, Column payload, string? workbookSessionId = ()) returns Column|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Column response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Gets the range specified by the address or name.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookTableColumnId - key: id of workbookTableColumn
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetTableColumnRange(string workbookId, string workbookWorksheetId, string workbookTableId, string workbookTableColumnId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/columns/${getEncodedUri(workbookTableColumnId)}/range`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Invoke function range
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + return - Success 
    remote isolated function getWorksheetTableRange(string workbookId, string workbookWorksheetId, string workbookTableId, string? workbookSessionId = ()) returns Range|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/range`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Range response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Get rows from workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + top - Show only the first n items
    # + skip - Skip the first n items
    # + search - Search items by search phrases
    # + filter - Filter items by property values
    # + count - Include count of items
    # + orderby - Order items by property values
    # + 'select - Select properties to be returned
    # + expand - Expand related entities
    # + return - Retrieved navigation property 
    remote isolated function listWorksheetTableRows(string workbookId, string workbookWorksheetId, string workbookTableId, string? workbookSessionId = (), int? top = (), int? skip = (), string? search = (), string? filter = (), boolean? count = (), ("id"|"id desc"|"index"|"index desc"|"values"|"values desc")[]? orderby = (), ("id"|"index"|"values")[]? 'select = (), ("*")[]? expand = ()) returns Rows|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/rows`;
        map<anydata> queryParam = {"$top": top, "$skip": skip, "$search": search, "$filter": filter, "$count": count, "$orderby": orderby, "$select": 'select, "$expand": expand};
        map<Encoding> queryParamEncoding = {"$orderby": {style: FORM, explode: false}, "$select": {style: FORM, explode: false}, "$expand": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queryParam, queryParamEncoding);
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        Rows response = check self.clientEp->get(resourcePath, httpHeaders);
        return response;
    }
    # Delete row for workbooks
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbooktablerowId - key: id of workbookTableRow
    # + workbookSessionId - The ID of the session
    # + ifMatch - ETag
    # + return - Success 
    remote isolated function deleteWorksheetTableRow(string workbookId, string workbookWorksheetId, string workbookTableId, string workbooktablerowId, string? workbookSessionId = (), string? ifMatch = ()) returns http:Response|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/rows/${getEncodedUri(workbooktablerowId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId, "If-Match": ifMatch};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Response response = check self.clientEp->delete(resourcePath, headers = httpHeaders);
        return response;
    }
    # Updates the row in workbooks.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbooktablerowId - key: id of workbookTableRow
    # + workbookSessionId - The ID of the session
    # + payload - New navigation property values
    # + return - New navigation property values 
    remote isolated function updateWorksheetTableRow(string workbookId, string workbookWorksheetId, string workbookTableId, string workbooktablerowId, Row payload, string? workbookSessionId = ()) returns Row|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/rows/${getEncodedUri(workbooktablerowId)}`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Row response = check self.clientEp->patch(resourcePath, request, httpHeaders);
        return response;
    }
    # Adds row to the end of the table.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookTableId - key: id of workbookTable
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorksheetTableRow(string workbookId, string workbookWorksheetId, string workbookTableId, NewRow payload, string? workbookSessionId = ()) returns Row|error {
        string resourcePath = string `/me/drive/items/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/${getEncodedUri(workbookTableId)}/rows/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Row response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
    # Creates a new table.
    #
    # + workbookId - key: id of workbook
    # + workbookWorksheetId - key: id of workbookWorksheet
    # + workbookSessionId - The ID of the session
    # + payload - Action parameters
    # + return - Success 
    remote isolated function addWorksheetTable(string workbookId, string workbookWorksheetId, NewTable payload, string? workbookSessionId = ()) returns Table|error {
        string resourcePath = string `/workbooks/${getEncodedUri(workbookId)}/workbook/worksheets/${getEncodedUri(workbookWorksheetId)}/tables/add`;
        map<any> headerValues = {"workbook-session-id": workbookSessionId};
        map<string|string[]> httpHeaders = getMapForHeaders(headerValues);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        Table response = check self.clientEp->post(resourcePath, request, httpHeaders);
        return response;
    }
}
