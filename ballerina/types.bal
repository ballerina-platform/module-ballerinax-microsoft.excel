// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/http;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://login.microsoftonline.com/organizations/oauth2/v2.0/token";
|};

public type FormatProtection record {
    *Entity;
    boolean? formulaHidden?;
    boolean? locked?;
};

public type Icon record {
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int:Signed32 index?;
    string set?;
};

public type NamedItem record {
    *Entity;
    string? comment?;
    string? name?;
    string scope?;
    string? 'type?;
    Json? value?;
    boolean visible?;
    Worksheet? worksheet?;
};

public type Json record {
};

public type Worksheet record {
    *Entity;
    string? name?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int position?;
    string visibility?;
    Chart[] charts?;
    NamedItem[] names?;
    PivotTable[] pivotTables?;
    WorksheetProtection? protection?;
    Table[] tables?;
};

public type ApplyTo record {
    string applyTo?;
};

public type ChartTitle record {
    *Entity;
    boolean? overlay?;
    string? text?;
    boolean visible?;
    ChartTitleFormat? format?;
};

public type ChartAxes record {
    *Entity;
    ChartAxis? categoryAxis?;
    ChartAxis? seriesAxis?;
    ChartAxis? valueAxis?;
};

public type Row record {
    *Entity;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int index?;
    # The values in the table row
    (string|int|decimal?)[][] values?;
};

public type WorksheetProtectionOptions record {
    boolean allowAutoFilter?;
    boolean allowDeleteColumns?;
    boolean allowDeleteRows?;
    boolean allowFormatCells?;
    boolean allowFormatColumns?;
    boolean allowFormatRows?;
    boolean allowInsertColumns?;
    boolean allowInsertHyperlinks?;
    boolean allowInsertRows?;
    boolean allowPivotTables?;
    boolean allowSort?;
};

public type ChartAxis record {
    *Entity;
    Json? majorUnit?;
    Json? maximum?;
    Json? minimum?;
    Json? minorUnit?;
    ChartAxisFormat? format?;
    ChartGridlines? majorGridlines?;
    ChartGridlines? minorGridlines?;
    ChartAxisTitle? title?;
};

public type ChartSeriesCollection record {
    ChartSeries[] value?;
};

public type NewChart record {
    string 'type?;
    string? sourceData?;
    string seriesBy?;
};

public type ChartDataLabels record {
    *Entity;
    string? position?;
    string? separator?;
    boolean? showBubbleSize?;
    boolean? showCategoryName?;
    boolean? showLegendKey?;
    boolean? showPercentage?;
    boolean? showSeriesName?;
    boolean? showValue?;
    ChartDataLabelFormat? format?;
};

public type ChartAxisFormat record {
    *Entity;
    ChartFont? font?;
    ChartLineFormat? line?;
};

public type Formula record {
    string? name?;
    string? formula?;
    string? comment?;
};

public type ChartPoint record {
    *Entity;
    Json? value?;
    ChartPointFormat? format?;
};

public type Chart record {
    *Entity;
    decimal|string|int height?;
    decimal|string|int left?;
    string? name?;
    decimal|string|int top?;
    decimal|string|int width?;
    ChartAxes? axes?;
    ChartDataLabels? dataLabels?;
    ChartAreaFormat? format?;
    ChartLegend? legend?;
    ChartSeries[] series?;
    ChartTitle? title?;
    Worksheet? worksheet?;
};

public type Columns record {
    Column[] value?;
};

public type ChartLegendFormat record {
    *Entity;
    ChartFill? fill?;
    ChartFont? font?;
};

public type ChartLegend record {
    *Entity;
    boolean? overlay?;
    string? position?;
    boolean visible?;
    ChartLegendFormat? format?;
};

public type ChartGridlinesFormat record {
    *Entity;
    ChartLineFormat? line?;
};

public type ChartPointFormat record {
    *Entity;
    ChartFill? fill?;
};

public type Rows record {
    Row[] value?;
};

public type NewNamedItem record {
    string? name?;
    Json? reference?;
    string? comment?;
};

public type Worksheets record {
    Worksheet[] value?;
};

public type WorksheetProtection record {
    *Entity;
    WorksheetProtectionOptions? options?;
    boolean protected?;
};

public type RangeFill record {
    *Entity;
    string? color?;
};

public type RangeSort record {
    *Entity;
};

public type PivotTable record {
    *Entity;
    string? name?;
    Worksheet? worksheet?;
};

public type ChartFill record {
    *Entity;
};

public type Column record {
    *Entity;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int index?;
    string? name?;
    # The values in the table row
    (string|int|decimal?)[][] values?;
    Filter? filter?;
};

public type Charts record {
    Chart[] value?;
};

public type RangeBorder record {
    *Entity;
    string? color?;
    string? sideIndex?;
    string? style?;
    string? weight?;
};

public type SortField record {
    boolean 'ascending?;
    string? color?;
    string dataOption?;
    Icon? icon?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int 'key?;
    string sortOn?;
};

public type Shift record {
    string shift?;
};

public type WorkbookPivotTables record {
    PivotTable[] value?;
};

public type ChartDataLabelFormat record {
    *Entity;
    ChartFill? fill?;
    ChartFont? font?;
};

public type RangeFont record {
    *Entity;
    boolean? bold?;
    string? color?;
    boolean? italic?;
    string? name?;
    decimal|string|"-INF"|"INF"|"NaN"? size?;
    string? underline?;
};

public type ChartAreaFormat record {
    *Entity;
    ChartFill? fill?;
    ChartFont? font?;
};

public type SessionInfo record {
    string? id?;
    boolean? persistChanges?;
};

public type ChartSeries record {
    *Entity;
    string? name?;
    ChartSeriesFormat? format?;
    ChartPoint[] points?;
};

public type ChartSeriesFormat record {
    *Entity;
    ChartFill? fill?;
    ChartLineFormat? line?;
};

public type NewRow record {
    int? index?;
    (string|int|decimal|anydata?)[] values?;
};

public type Filter record {
    *Entity;
    FilterCriteria? criteria?;
};

public type ChartAxisTitle record {
    *Entity;
    string? text?;
    boolean visible?;
    ChartAxisTitleFormat? format?;
};

public type ChartLineFormat record {
    *Entity;
    string? color?;
};

public type PersistChanges record {
    boolean persistChanges?;
};

public type RangeView record {
    *Entity;
    Json? cellAddresses?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int columnCount?;
    Json? formulas?;
    Json? formulasLocal?;
    Json? formulasR1C1?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int index?;
    Json? numberFormat?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int rowCount?;
    Json? text?;
    Json? valueTypes?;
    Json? values?;
    RangeView[] rows?;
};

public type Entity record {
    string id?;
};

public type Across record {
    boolean across?;
};

public type ChartTitleFormat record {
    *Entity;
    ChartFill? fill?;
    ChartFont? font?;
};

public type ChartFont record {
    *Entity;
    boolean? bold?;
    string? color?;
    boolean? italic?;
    string? name?;
    decimal|string|"-INF"|"INF"|"NaN"? size?;
    string? underline?;
};

public type NamedItems record {
    NamedItem[] value?;
};

public type ChartAxisTitleFormat record {
    *Entity;
    ChartFont? font?;
};

public type Image record {
    string? value?;
};

public type Position record {
    string? startCell?;
    string? endCell?;
};

public type Application record {
    *Entity;
    string calculationMode?;
};

public type ChartGridlines record {
    *Entity;
    boolean visible?;
    ChartGridlinesFormat? format?;
};

public type Range record {
    *Entity;
    string? address?;
    string? addressLocal?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int cellCount?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int columnCount?;
    boolean? columnHidden?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int columnIndex?;
    Json? formulas?;
    Json? formulasLocal?;
    Json? formulasR1C1?;
    boolean? hidden?;
    Json? numberFormat?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int rowCount?;
    boolean? rowHidden?;
    @constraint:Int {minValue: -2147483648, maxValue: 2147483647}
    int rowIndex?;
    Json? text?;
    Json? valueTypes?;
    Json? values?;
    RangeFormat? format?;
    RangeSort? sort?;
    Worksheet? worksheet?;
};

public type RangeFormat record {
    *Entity;
    decimal|string|"-INF"|"INF"|"NaN"? columnWidth?;
    string? horizontalAlignment?;
    decimal|string|"-INF"|"INF"|"NaN"? rowHeight?;
    string? verticalAlignment?;
    boolean? wrapText?;
    RangeBorder[] borders?;
    RangeFill? fill?;
    RangeFont? font?;
    FormatProtection? protection?;
};

public type Tables record {
    Table[] value?;
};

public type CalculationType record {
    string calculationType?;
};

public type TableSort record {
    *Entity;
    (SortField?)[] fields?;
    boolean matchCase?;
    string method?;
};

public type SetData record {
    string? sourceData?;
    string seriesBy?;
};

public type NewTable record {
    string? address?;
    boolean hasHeaders?;
};

public type Table record {
    *Entity;
    boolean highlightFirstColumn?;
    boolean highlightLastColumn?;
    string? name?;
    boolean showBandedColumns?;
    boolean showBandedRows?;
    boolean showFilterButton?;
    boolean showHeaders?;
    boolean showTotals?;
    string? style?;
    Column[] columns?;
    Row[] rows?;
    TableSort? sort?;
    Worksheet? worksheet?;
};

public type FilterCriteria record {
    string? color?;
    string? criterion1?;
    string? criterion2?;
    string dynamicCriteria?;
    string filterOn?;
    Icon? icon?;
    string operator?;
    Json? values?;
};
