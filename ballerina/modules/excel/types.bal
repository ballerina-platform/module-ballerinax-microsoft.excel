// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    http:BearerTokenConfig|OAuth2RefreshTokenGrantConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# OAuth2 Refresh Token Grant Configs
public type OAuth2RefreshTokenGrantConfig record {|
    *http:OAuth2RefreshTokenGrantConfig;
    # Refresh URL
    string refreshUrl = "https://login.microsoftonline.com/organizations/oauth2/v2.0/token";
|};

public type ColumnsArr Columns[];

# Represents the properties to add a new name to the collection of the given scope using the user's locale for the formula..
public type FormulaLocal record {
    # The name of the new named item.
    string name?;
    # The formula or the range that the name will refer to.
    string formulas?;
    # The formula or the range that the name will refer to.
    string comment?;
};

# Represents a range view.
public type RangeView record {
    # Represents the cell addresses
    record {} cellAddresses?;
    # Returns the number of visible columns. Read-only.
    int columnCount?;
    # Represents the formula in A1-style notation.
    record {} formulas?;
    # Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.
    record {} formulasLocal?;
    # Represents the formula in R1C1-style notation.
    record {} formulasR1C1?;
    # Index of the range
    int index?;
    # Represents Excel's number format code for the given cell.
    record {} numberFormat?;
    # Returns the total number of rows in the range. Read-only.
    int rowCount?;
    # Text values of the specified range. The Text value doesn't depend on the cell width. The sign substitution that happens in Excel UI doesn't affect the text value returned by the API. Read-only.
    record {} text?;
    # Represents the type of data of each cell. The possible values are:- Unknown, Empty, String, Integer, Double, Boolean, Error. Read-only.
    record {} valueTypes?;
    # Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contains an error returns the error string.
    record {} values?;
};

# Represents the properties of the named item.
public type NamedItems record {
    # Represents the list of the named item
    NamedItem[] value?;
};

# Represents the range format.
public type RangeFormat record {
    # Gets or sets the width of all columns within the range. If the column widths aren't uniform, null will be returned.
    decimal columnWidth?;
    # Represents the horizontal alignment for the specified object
    "General"|"Left"|"Center"|"Right"|"Fill"|"Justify"|"CenterAcrossSelection"|"Distributed" horizontalAlignment?;
    # Gets or sets the height of all rows in the range. If the row heights aren't uniform null will be returned.
    decimal rowHeight?;
    # Represents the horizontal alignment for the specified object
    "Top"|"Center"|"Bottom"|"Justify"|"Distributed" verticalAlignment?;
    # Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting.
    boolean wrapText?;
};

# Represents the properties to create a named item.
public type AddNamedItemPayload Item|FormulaLocal;

# Represents the worksheet.
public type Worksheet record {
    # The unique identifier of the worksheet
    string id?;
    # The name of the worksheet
    string name?;
    # The position of the worksheet in the workbook
    int position?;
    # The Visibility of the worksheet.
    "Visible"|"Hidden"|"VeryHidden" visibility?;
};

# Represents the properties to create chart.
public type CreateChartPayload record {
    # Represents the type of a chart
    string 'type?;
    # The Range object corresponding to the source data
    string sourceData?;
    # Specifies the way columns or rows are used as data series on the chart.
    "Auto"|"Columns"|"Rows" seriesBy?;
};

# Represents a list of chart.
public type Charts record {
    # Represents the list of the chart
    Chart[] values?;
};

# Represents the chart series.
public type ChartSeries record {
    # The name of a series in a chart
    string name?;
};

# Represents the properties to the merge range.
public type Across record {
    # Set true to merge cells in each row of the specified range as separate merged cells.
    boolean across?;
};

# Represents an image.
public type Image record {
    # The image in base64-encoded
    string value?;
};

# Represents the properties to create table.
public type CreateTablePayload record {
    # Address or name of the range object representing the data source. If the address doesn't contain a sheet name, the currently active sheet is used.
    string address?;
    # whether the data being imported has column labels. If the source doesn't contain headers (when this property set to false), Excel generates header shifting the data down by one row.
    boolean hasHeaders?;
};

# Represents the properties to add new name to the collection of the given scope.
public type Item record {
    # The name of the new named item.
    string name?;
    # The type of the new named item.
    "Range"|"Formula"|"Text"|"Integer"|"Double"|"Boolean" 'type?;
    # The reference to the object that the new named item refers to.
    string reference?;
    # The comment associated with the named item
    string comment?;
};

# Represents the list of pivot table.
public type PivotTables record {
    # The list of pivot table
    PivotTable[] value?;
};

# Represents the table column.
public type Column record {
    # A unique key that identifies the column within the table
    string id?;
    # The index number of the column within the columns collection of the table.
    int index?;
    # The name of the table column.
    string name?;
    # The raw values of the specified range
    (string|int)[][] values?;
};

# Represents the properties to clear range values
public type ApplyTo record {
    # Determines the type of clear action
    "All"|"Formats"|"Contents" applyTo?;
};

# Represents a list of table.
public type Tables record {
    # List of table
    Table[] valuse?;
};

# Represents the range.
public type AnotherRange record {
    # The range or address or range name
    string anotherRange?;
};

# Represents the list of replies of the workbook comment.
public type Replies record {
    # The list of replies of the workbook comment
    Reply[] value?;
};

# Represents the properties to recalculate all currently opened workbooks in Excel.
public type CalculationMode record {
    # Specifies the calculation type to use
    "Recalculate"|"Full"|"FullRebuild" calculationMode?;
};

# Represents a chart properties.
public type Chart record {
    # Represents the height, in points, of the chart object.
    decimal height?;
    # Gets a chart based on its position in the collection. Read-only.
    string id?;
    # The distance, in points, from the left side of the chart to the worksheet origin.
    decimal left?;
    # Represents the name of a chart object.
    string name?;
    # Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
    decimal top?;
    # Represents the width, in points, of the chart object.
    decimal width?;
};

# Represents the list of table row properties.
public type Rows record {
    # The list of table row
    Row[] value?;
};

# Represents worksheet name to create worksheet.
public type CreateWorksheet record {
    # Name of the new worksheet.
    string name?;
};

# Represents the ways to shift the cells.
public type Shift record {
    # Specifies which way to shift the cells
    "Down"|"Right"|"Up"|"Left" shift?;
};

# Represents the workbook comment.
public type Comment record {
    # The content of the comment
    string content?;
    # Indicates the type for the comment
    string contentType?;
    # Represents the comment identifier. Read-only
    string id?;
};

# Represents a table properties.
public type Table record {
    # A value that uniquely identifies the table in a given workbook
    string id?;
    # The name of the table.
    string name?;
    # Indicates whether the first column contains special formatting
    boolean highlightFirstColumn?;
    # Indicates whether the last column contains special formatting
    boolean highlightLastColumn?;
    # Legacy ID used in older Excel clients
    string legacyId?;
    # Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier
    boolean showBandedRows?;
    # Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier
    boolean showBandedColumns?;
    # Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row
    boolean showFilterButton?;
    # Indicates whether the header row is visible or not. This value can be set to show or remove the header row
    boolean showHeaders?;
    # Indicates whether the total row is visible or not. This value can be set to show or remove the total row
    boolean showTotals?;
    # Constant value that represents the Table style.
    "TableStyleLight1"|"TableStyleLight21"|"TableStyleMedium1"|"TableStyleMedium2"|"TableStyleMedium28"|"TableStyleDark1"|"TableStyleDark11" style?;
};

# Represents the properties of the position.
public type Position record {
    # The start cell. This is where the chart is moved to. The start cell is the top-left or top-right cell, depending on the user's right-to-left display settings.
    record {} startCell;
    # The end cell. If specified, the chart's width and height will be set to fully cover up this cell/range.
    string endCell?;
};

# Represents the list of workbook comment.
public type Comments record {
    # The list of workbook comment
    Comment[] values?;
};

# Represents the list of table column.
public type Columns record {
    # The list of table column
    Column[] value?;
};

public type Range record {
    # Represents the range reference in A1-style. Address value contains the Sheet reference (for example, Sheet1!A1:B4). Read-only
    string address?;
    # Represents range reference for the specified range in the language of the user. Read-only.
    string addressLocal?;
    # Number of cells in the range. Read-only.
    int cellCount?;
    # Represents the total number of columns in the range. Read-only.
    int columnCount?;
    # Represents if all columns of the current range are hidden
    boolean columnHidden?;
    # Represents the column number of the first cell in the range. Zero-indexed. Read-only.
    int columnIndex?;
    # Represents the formula in A1-style notation.
    (string|int)[][]? formulas?;
    # Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.
    (string|int)[][]? formulasLocal?;
    # Represents the formula in R1C1-style notation.
    (string|int)[][]? formulasR1C1?;
    # Represents if all cells of the current range are hidden. Read-only.
    boolean hidden?;
    # Represents Excel's number format code for the given cell.
    (string|int)[][]? numberFormat?;
    # Returns the total number of rows in the range. Read-only.
    int rowCount?;
    # Represents if all rows of the current range are hidden.
    boolean rowHidden?;
    # Returns the row number of the first cell in the range. Zero-indexed. Read-only.
    int rowIndex?;
    # Text values of the specified range. The Text value doesn't depend on the cell width. The sign substitution that happens in Excel UI doesn't affect the text value returned by the API. Read-only.
    (string|int)[][]? text?;
    # Represents the type of data of each cell. The possible values are:- Unknown, Empty, String, Integer, Double, Boolean, Error. Read-only.
    (string|int)[][]? valueTypes?;
    # Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contains an error returns the error string.
    (string|int)[][]? values?;
};

# Represents the list of worksheet.
public type Worksheets record {
    # The list of worksheet
    Worksheet[] value?;
};

# Represents the pivot table.
public type PivotTable record {
    # ID of the PivotTable. Read-only.
    string id?;
    # Name of the PivotTable
    string name?;
};

# Represents the offset range.
public type OffsetRange record {
    # The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.
    int rowOffset?;
    # The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.
    int columnOffset?;
};

# Represents the properties to reset the data of the chart.
public type ResetData record {
    # The range corresponding to the source data.
    record {} sourceData?;
    # Specifies the way columns or rows are used as data series on the chart.
    "Auto"|"Columns"|"Rows" seriesBy?;
};

# Represents the reply of the workbook comments.
public type Reply record {
    # The ID of the comment reply
    string id?;
    # The content of the comment reply
    string content;
    # Indicates the type for the comment reply
    string contentType;
};

# Represents the collection of the chart series.
public type CollectionOfChartSeries record {
    # The collection of the chart series
    ChartSeries[] value?;
};

# Represents the table row properties.
public type Row record {
    # The ID of the table row.
    string id?;
    # The index of the table row.
    int index?;
    # The values in the table row.
    (string|int)[][] values?;
};

# Represents the properties of the named item.
public type NamedItem record {
    # The name of the new named item.
    string name?;
    # The type of the new named item.
    "String"|"Integer"|"Double"|"Range"|"Boolean" 'type?;
    # The comment associated with this name
    string comment?;
    # Indicates whether the name is scoped to the workbook or to a specific worksheet.
    string scopes?;
    # Represents the formula that the name is defined to refer to
    record {}|string|record {}[] value?;
    # Specifies whether the object is visible or not
    boolean visible?;
};

# Represents the Excel application that manages the workbook.
public type Application record {
    # Returns the calculation mode used in the workbook
    "Automatic"|"AutomaticExceptTables"|"Manual" calculationMode?;
};

# Represents session info of workbook.
public type Session record {
    # The ID of the workbook session
    string id?;
    # Whether to create a persistent session or not. `true` for persistent session. `false` for non-persistent session (view mode)
    boolean persistChanges;
};
